{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7f86e45d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: pandas_datareader in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (0.10.0)\n",
      "Requirement already satisfied: requests>=2.19.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas_datareader) (2.28.1)\n",
      "Requirement already satisfied: pandas>=0.23 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas_datareader) (1.4.4)\n",
      "Requirement already satisfied: lxml in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas_datareader) (4.9.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas>=0.23->pandas_datareader) (2.8.2)\n",
      "Requirement already satisfied: numpy>=1.18.5 in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (from pandas>=0.23->pandas_datareader) (1.24.4)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas>=0.23->pandas_datareader) (2022.1)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.19.0->pandas_datareader) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.19.0->pandas_datareader) (2022.9.14)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.19.0->pandas_datareader) (3.3)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from requests>=2.19.0->pandas_datareader) (1.26.11)\n",
      "Requirement already satisfied: six>=1.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.1->pandas>=0.23->pandas_datareader) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install  pandas_datareader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1ff37274",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "\n",
    "import pandas_datareader.data as web\n",
    "\n",
    "# visualization\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# do not show Warnings\n",
    "import warnings\n",
    "warnings.simplefilter(action='ignore', category=Warning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c1f3621e",
   "metadata": {},
   "outputs": [],
   "source": [
    "gdp = web.DataReader(name='GDP', data_source='fred', start='1980-1', end='2023-12' )\n",
    "y=gdp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "21b75ca9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: sktime in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (0.34.0)\n",
      "Requirement already satisfied: joblib<1.5,>=1.2.0 in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (from sktime) (1.4.2)\n",
      "Requirement already satisfied: numpy<2.2,>=1.21 in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (from sktime) (1.24.4)\n",
      "Requirement already satisfied: pandas<2.3.0,>=1.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from sktime) (1.4.4)\n",
      "Requirement already satisfied: scikit-base<0.12.0,>=0.6.1 in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (from sktime) (0.11.0)\n",
      "Requirement already satisfied: packaging in c:\\programdata\\anaconda3\\lib\\site-packages (from sktime) (21.3)\n",
      "Requirement already satisfied: scikit-learn<1.6.0,>=0.24 in c:\\programdata\\anaconda3\\lib\\site-packages (from sktime) (1.0.2)\n",
      "Requirement already satisfied: scipy<2.0.0,>=1.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from sktime) (1.9.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas<2.3.0,>=1.1->sktime) (2.8.2)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas<2.3.0,>=1.1->sktime) (2022.1)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn<1.6.0,>=0.24->sktime) (2.2.0)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from packaging->sktime) (3.0.9)\n",
      "Requirement already satisfied: six>=1.5 in c:\\programdata\\anaconda3\\lib\\site-packages (from python-dateutil>=2.8.1->pandas<2.3.0,>=1.1->sktime) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install sktime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5f741d90",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sktime.forecasting.arima import ARIMA, AutoARIMA\n",
    "# from sktime.forecasting.arima import StatsModelsARIMA\n",
    "# from sktime.forecasting.statsforecast import StatsForecastAutoARIMA\n",
    "from sktime.utils.plotting import plot_series\n",
    "# временной горизонт для прогнозирования\n",
    "from sktime.forecasting.base import ForecastingHorizon\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "898d04aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=gdp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d4a94ec",
   "metadata": {},
   "source": [
    "$arima(1,0,1)$ with drift and trend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cde8f9fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: pmdarima in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (2.0.4)\n",
      "Requirement already satisfied: scikit-learn>=0.22 in c:\\programdata\\anaconda3\\lib\\site-packages (from pmdarima) (1.0.2)\n",
      "Requirement already satisfied: setuptools!=50.0.0,>=38.6.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from pmdarima) (63.4.1)\n",
      "Requirement already satisfied: scipy>=1.3.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from pmdarima) (1.9.1)\n",
      "Requirement already satisfied: numpy>=1.21.2 in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (from pmdarima) (1.24.4)\n",
      "Requirement already satisfied: Cython!=0.29.18,!=0.29.31,>=0.29 in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (from pmdarima) (3.0.11)\n",
      "Requirement already satisfied: urllib3 in c:\\programdata\\anaconda3\\lib\\site-packages (from pmdarima) (1.26.11)\n",
      "Requirement already satisfied: statsmodels>=0.13.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from pmdarima) (0.13.2)\n",
      "Requirement already satisfied: pandas>=0.19 in c:\\programdata\\anaconda3\\lib\\site-packages (from pmdarima) (1.4.4)\n",
      "Requirement already satisfied: joblib>=0.11 in c:\\users\\student\\appdata\\roaming\\python\\python39\\site-packages (from pmdarima) (1.4.2)\n",
      "Requirement already satisfied: packaging>=17.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from pmdarima) (21.3)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from packaging>=17.1->pmdarima) (3.0.9)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas>=0.19->pmdarima) (2022.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.1 in c:\\programdata\\anaconda3\\lib\\site-packages (from pandas>=0.19->pmdarima) (2.8.2)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from scikit-learn>=0.22->pmdarima) (2.2.0)\n",
      "Requirement already satisfied: patsy>=0.5.2 in c:\\programdata\\anaconda3\\lib\\site-packages (from statsmodels>=0.13.2->pmdarima) (0.5.2)\n",
      "Requirement already satisfied: six in c:\\programdata\\anaconda3\\lib\\site-packages (from patsy>=0.5.2->statsmodels>=0.13.2->pmdarima) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pmdarima"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "efc07d01",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>SARIMAX Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>176</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>           <td>SARIMAX(1, 0, 1)</td> <th>  Log Likelihood     </th> <td>-1238.304</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Fri, 15 Nov 2024</td> <th>  AIC                </th> <td>2482.608</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>20:43:49</td>     <th>  BIC                </th> <td>2492.119</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sample:</th>             <td>01-01-1980</td>    <th>  HQIC               </th> <td>2486.466</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                   <td>- 10-01-2023</td>   <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L1</th>  <td>    0.9999</td> <td>    0.000</td> <td> 3905.209</td> <td> 0.000</td> <td>    0.999</td> <td>    1.000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ma.L1</th>  <td>    0.1941</td> <td>    0.028</td> <td>    6.954</td> <td> 0.000</td> <td>    0.139</td> <td>    0.249</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sigma2</th> <td>   7.2e+04</td> <td> 2741.853</td> <td>   26.261</td> <td> 0.000</td> <td> 6.66e+04</td> <td> 7.74e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Ljung-Box (L1) (Q):</th>     <td>6.07</td>  <th>  Jarque-Bera (JB):  </th> <td>15105.61</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Q):</th>                <td>0.01</td>  <th>  Prob(JB):          </th>   <td>0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Heteroskedasticity (H):</th> <td>35.79</td> <th>  Skew:              </th>   <td>0.69</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(H) (two-sided):</th>    <td>0.00</td>  <th>  Kurtosis:          </th>   <td>48.36</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                               SARIMAX Results                                \n",
       "==============================================================================\n",
       "Dep. Variable:                      y   No. Observations:                  176\n",
       "Model:               SARIMAX(1, 0, 1)   Log Likelihood               -1238.304\n",
       "Date:                Fri, 15 Nov 2024   AIC                           2482.608\n",
       "Time:                        20:43:49   BIC                           2492.119\n",
       "Sample:                    01-01-1980   HQIC                          2486.466\n",
       "                         - 10-01-2023                                         \n",
       "Covariance Type:                  opg                                         \n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "ar.L1          0.9999      0.000   3905.209      0.000       0.999       1.000\n",
       "ma.L1          0.1941      0.028      6.954      0.000       0.139       0.249\n",
       "sigma2        7.2e+04   2741.853     26.261      0.000    6.66e+04    7.74e+04\n",
       "===================================================================================\n",
       "Ljung-Box (L1) (Q):                   6.07   Jarque-Bera (JB):             15105.61\n",
       "Prob(Q):                              0.01   Prob(JB):                         0.00\n",
       "Heteroskedasticity (H):              35.79   Skew:                             0.69\n",
       "Prob(H) (two-sided):                  0.00   Kurtosis:                        48.36\n",
       "===================================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
       "\"\"\""
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecaster = ARIMA(order=(1,0,1), trend='n')\n",
    "forecaster.fit(y)\n",
    "forecaster.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b49c4e71",
   "metadata": {},
   "source": [
    "$arima(1,1,0)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b19e8719",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>SARIMAX Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>           <td>y</td>        <th>  No. Observations:  </th>    <td>176</td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>           <td>SARIMAX(1, 1, 0)</td> <th>  Log Likelihood     </th> <td>-1223.717</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Fri, 15 Nov 2024</td> <th>  AIC                </th> <td>2451.433</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>19:32:08</td>     <th>  BIC                </th> <td>2457.763</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sample:</th>             <td>01-01-1980</td>    <th>  HQIC               </th> <td>2454.001</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th></th>                   <td>- 10-01-2023</td>   <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>        <td>opg</td>       <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "     <td></td>       <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ar.L1</th>  <td>    0.3017</td> <td>    0.027</td> <td>   11.079</td> <td> 0.000</td> <td>    0.248</td> <td>    0.355</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sigma2</th> <td> 6.973e+04</td> <td> 2648.315</td> <td>   26.331</td> <td> 0.000</td> <td> 6.45e+04</td> <td> 7.49e+04</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Ljung-Box (L1) (Q):</th>     <td>15.48</td> <th>  Jarque-Bera (JB):  </th> <td>21090.09</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Q):</th>                <td>0.00</td>  <th>  Prob(JB):          </th>   <td>0.00</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Heteroskedasticity (H):</th> <td>47.12</td> <th>  Skew:              </th>   <td>1.85</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(H) (two-sided):</th>    <td>0.00</td>  <th>  Kurtosis:          </th>   <td>56.65</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Covariance matrix calculated using the outer product of gradients (complex-step)."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                               SARIMAX Results                                \n",
       "==============================================================================\n",
       "Dep. Variable:                      y   No. Observations:                  176\n",
       "Model:               SARIMAX(1, 1, 0)   Log Likelihood               -1223.717\n",
       "Date:                Fri, 15 Nov 2024   AIC                           2451.433\n",
       "Time:                        19:32:08   BIC                           2457.763\n",
       "Sample:                    01-01-1980   HQIC                          2454.001\n",
       "                         - 10-01-2023                                         \n",
       "Covariance Type:                  opg                                         \n",
       "==============================================================================\n",
       "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "ar.L1          0.3017      0.027     11.079      0.000       0.248       0.355\n",
       "sigma2      6.973e+04   2648.315     26.331      0.000    6.45e+04    7.49e+04\n",
       "===================================================================================\n",
       "Ljung-Box (L1) (Q):                  15.48   Jarque-Bera (JB):             21090.09\n",
       "Prob(Q):                              0.00   Prob(JB):                         0.00\n",
       "Heteroskedasticity (H):              47.12   Skew:                             1.85\n",
       "Prob(H) (two-sided):                  0.00   Kurtosis:                        56.65\n",
       "===================================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Covariance matrix calculated using the outer product of gradients (complex-step).\n",
       "\"\"\""
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecaster1 = ARIMA(order=(1,1,0), trend='n')\n",
    "forecaster1.fit(y)\n",
    "forecaster1.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2ea4901",
   "metadata": {},
   "source": [
    "$arima(1,1,1)$ and $arima(1,2,0)$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cc7d7d8b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-711301c1-659f-4299-af77-2c133347e3ca {\n",
       "    /* Definition of color scheme common for light and dark mode */\n",
       "    --sklearn-color-text: black;\n",
       "    --sklearn-color-line: gray;\n",
       "    /* Definition of color scheme for objects */\n",
       "    --sklearn-color-level-0: #fff5e6;\n",
       "    --sklearn-color-level-1: #f6e4d2;\n",
       "    --sklearn-color-level-2: #ffe0b3;\n",
       "    --sklearn-color-level-3: chocolate;\n",
       "\n",
       "    /* Specific color for light theme */\n",
       "    --sklearn-color-text-on-default-background: var(--theme-code-foreground, var(--jp-content-font-color1, black));\n",
       "    --sklearn-color-background: var(--theme-background, var(--jp-layout-color0, white));\n",
       "    --sklearn-color-border-box: var(--theme-code-foreground, var(--jp-content-font-color1, black));\n",
       "    --sklearn-color-icon: #696969;\n",
       "\n",
       "    @media (prefers-color-scheme: dark) {\n",
       "      /* Redefinition of color scheme for dark theme */\n",
       "      --sklearn-color-text-on-default-background: var(--theme-code-foreground, var(--jp-content-font-color1, white));\n",
       "      --sklearn-color-background: var(--theme-background, var(--jp-layout-color0, #111));\n",
       "      --sklearn-color-border-box: var(--theme-code-foreground, var(--jp-content-font-color1, white));\n",
       "      --sklearn-color-icon: #878787;\n",
       "    }\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca {\n",
       "    color: var(--sklearn-color-text);\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca pre {\n",
       "    padding: 0;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca input.sk-hidden--visually {\n",
       "    border: 0;\n",
       "    clip: rect(1px 1px 1px 1px);\n",
       "    clip: rect(1px, 1px, 1px, 1px);\n",
       "    height: 1px;\n",
       "    margin: -1px;\n",
       "    overflow: hidden;\n",
       "    padding: 0;\n",
       "    position: absolute;\n",
       "    width: 1px;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-dashed-wrapped {\n",
       "    border: 1px dashed var(--sklearn-color-line);\n",
       "    margin: 0 0.4em 0.5em 0.4em;\n",
       "    box-sizing: border-box;\n",
       "    padding-bottom: 0.4em;\n",
       "    background-color: var(--sklearn-color-background);\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-container {\n",
       "    /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "       but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "       so we also need the `!important` here to be able to override the\n",
       "       default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "       See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "    display: inline-block !important;\n",
       "    position: relative;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-text-repr-fallback {\n",
       "    display: none;\n",
       "  }\n",
       "\n",
       "  div.sk-parallel-item,\n",
       "  div.sk-serial,\n",
       "  div.sk-item {\n",
       "    /* draw centered vertical line to link estimators */\n",
       "    background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "    background-size: 2px 100%;\n",
       "    background-repeat: no-repeat;\n",
       "    background-position: center center;\n",
       "  }\n",
       "\n",
       "  /* Parallel-specific style estimator block */\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-parallel-item::after {\n",
       "    content: \"\";\n",
       "    width: 100%;\n",
       "    border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "    flex-grow: 1;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-parallel {\n",
       "    display: flex;\n",
       "    align-items: stretch;\n",
       "    justify-content: center;\n",
       "    background-color: var(--sklearn-color-background);\n",
       "    position: relative;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-parallel-item {\n",
       "    display: flex;\n",
       "    flex-direction: column;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-parallel-item:first-child::after {\n",
       "    align-self: flex-end;\n",
       "    width: 50%;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-parallel-item:last-child::after {\n",
       "    align-self: flex-start;\n",
       "    width: 50%;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-parallel-item:only-child::after {\n",
       "    width: 0;\n",
       "  }\n",
       "\n",
       "  /* Serial-specific style estimator block */\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-serial {\n",
       "    display: flex;\n",
       "    flex-direction: column;\n",
       "    align-items: center;\n",
       "    background-color: var(--sklearn-color-background);\n",
       "    padding-right: 1em;\n",
       "    padding-left: 1em;\n",
       "  }\n",
       "\n",
       "\n",
       "  /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "  clickable and can be expanded/collapsed.\n",
       "  - Pipeline and ColumnTransformer use this feature and define the default style\n",
       "  - Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "  */\n",
       "\n",
       "  /* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-toggleable {\n",
       "    /* Default theme specific background. It is overwritten whether we have a\n",
       "    specific estimator or a Pipeline/ColumnTransformer */\n",
       "    background-color: var(--sklearn-color-background);\n",
       "  }\n",
       "\n",
       "  /* Toggleable label */\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca label.sk-toggleable__label {\n",
       "    cursor: pointer;\n",
       "    display: block;\n",
       "    width: 100%;\n",
       "    margin-bottom: 0;\n",
       "    padding: 0.5em;\n",
       "    box-sizing: border-box;\n",
       "    text-align: center;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca label.sk-toggleable__label-arrow:before {\n",
       "    /* Arrow on the left of the label */\n",
       "    content: \"в–ё\";\n",
       "    float: left;\n",
       "    margin-right: 0.25em;\n",
       "    color: var(--sklearn-color-icon);\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca label.sk-toggleable__label-arrow:hover:before {\n",
       "    color: var(--sklearn-color-text);\n",
       "  }\n",
       "\n",
       "  /* Toggleable content - dropdown */\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-toggleable__content {\n",
       "    max-height: 0;\n",
       "    max-width: 0;\n",
       "    overflow: hidden;\n",
       "    text-align: left;\n",
       "    background-color: var(--sklearn-color-level-0);\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-toggleable__content pre {\n",
       "    margin: 0.2em;\n",
       "    border-radius: 0.25em;\n",
       "    color: var(--sklearn-color-text);\n",
       "    background-color: var(--sklearn-color-level-0);\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "    /* Expand drop-down */\n",
       "    max-height: 200px;\n",
       "    max-width: 100%;\n",
       "    overflow: auto;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "    content: \"в–ѕ\";\n",
       "  }\n",
       "\n",
       "  /* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "    color: var(--sklearn-color-text);\n",
       "    background-color: var(--sklearn-color-level-2);\n",
       "  }\n",
       "\n",
       "  /* Estimator-specific style */\n",
       "\n",
       "  /* Colorize estimator box */\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "    /* unfitted */\n",
       "    background-color: var(--sklearn-color-level-2);\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-label label.sk-toggleable__label,\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-label label {\n",
       "    /* The background is the default theme color */\n",
       "    color: var(--sklearn-color-text-on-default-background);\n",
       "  }\n",
       "\n",
       "  /* On hover, darken the color of the background */\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-label:hover label.sk-toggleable__label {\n",
       "    color: var(--sklearn-color-text);\n",
       "    background-color: var(--sklearn-color-level-2);\n",
       "  }\n",
       "\n",
       "  /* Estimator label */\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-label label {\n",
       "    font-family: monospace;\n",
       "    font-weight: bold;\n",
       "    display: inline-block;\n",
       "    line-height: 1.2em;\n",
       "  }\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-label-container {\n",
       "    text-align: center;\n",
       "  }\n",
       "\n",
       "  /* Estimator-specific */\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-estimator {\n",
       "    font-family: monospace;\n",
       "    border: 1px dotted var(--sklearn-color-border-box);\n",
       "    border-radius: 0.25em;\n",
       "    box-sizing: border-box;\n",
       "    margin-bottom: 0.5em;\n",
       "    background-color: var(--sklearn-color-level-0);\n",
       "  }\n",
       "\n",
       "  /* on hover */\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca div.sk-estimator:hover {\n",
       "    background-color: var(--sklearn-color-level-2);\n",
       "  }\n",
       "\n",
       "  /* Specification for estimator info */\n",
       "\n",
       "  .sk-estimator-doc-link,\n",
       "  a:link.sk-estimator-doc-link,\n",
       "  a:visited.sk-estimator-doc-link {\n",
       "    float: right;\n",
       "    font-size: smaller;\n",
       "    line-height: 1em;\n",
       "    font-family: monospace;\n",
       "    background-color: var(--sklearn-color-background);\n",
       "    border-radius: 1em;\n",
       "    height: 1em;\n",
       "    width: 1em;\n",
       "    text-decoration: none !important;\n",
       "    margin-left: 1ex;\n",
       "    border: var(--sklearn-color-level-1) 1pt solid;\n",
       "    color: var(--sklearn-color-level-1);\n",
       "  }\n",
       "\n",
       "  /* On hover */\n",
       "  div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       "  .sk-estimator-doc-link:hover,\n",
       "  div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       "  .sk-estimator-doc-link:hover {\n",
       "    background-color: var(--sklearn-color-level-3);\n",
       "    color: var(--sklearn-color-background);\n",
       "    text-decoration: none;\n",
       "  }\n",
       "\n",
       "  /* Span, style for the box shown on hovering the info icon */\n",
       "  .sk-estimator-doc-link span {\n",
       "    display: none;\n",
       "    z-index: 9999;\n",
       "    position: relative;\n",
       "    font-weight: normal;\n",
       "    right: .2ex;\n",
       "    padding: .5ex;\n",
       "    margin: .5ex;\n",
       "    width: min-content;\n",
       "    min-width: 20ex;\n",
       "    max-width: 50ex;\n",
       "    color: var(--sklearn-color-text);\n",
       "    box-shadow: 2pt 2pt 4pt #999;\n",
       "    background: var(--sklearn-color-level-0);\n",
       "    border: .5pt solid var(--sklearn-color-level-3);\n",
       "  }\n",
       "\n",
       "  .sk-estimator-doc-link:hover span {\n",
       "    display: block;\n",
       "  }\n",
       "\n",
       "  /* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca a.estimator_doc_link {\n",
       "    float: right;\n",
       "    font-size: 1rem;\n",
       "    line-height: 1em;\n",
       "    font-family: monospace;\n",
       "    background-color: var(--sklearn-color-background);\n",
       "    border-radius: 1rem;\n",
       "    height: 1rem;\n",
       "    width: 1rem;\n",
       "    text-decoration: none;\n",
       "    color: var(--sklearn-color-level-1);\n",
       "    border: var(--sklearn-color-level-1) 1pt solid;\n",
       "  }\n",
       "\n",
       "  /* On hover */\n",
       "  #sk-711301c1-659f-4299-af77-2c133347e3ca a.estimator_doc_link:hover {\n",
       "    background-color: var(--sklearn-color-level-3);\n",
       "    color: var(--sklearn-color-background);\n",
       "    text-decoration: none;\n",
       "  }\n",
       "</style><div id='sk-711301c1-659f-4299-af77-2c133347e3ca' class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ARIMA(order=(1, 2, 0), trend=&#x27;n&#x27;)</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class='sk-item'><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=UUID('d1222257-50aa-49d0-bd4a-a0d2ac08ff4b') type=\"checkbox\" checked><label for=UUID('d1222257-50aa-49d0-bd4a-a0d2ac08ff4b') class='sk-toggleable__label sk-toggleable__label-arrow'>ARIMA<a class=\"sk-estimator-doc-link\" rel=\"noreferrer\" target=\"_blank\" href=\"https://www.sktime.net/en/v0.34.0/api_reference/auto_generated/sktime.forecasting.arima.ARIMA.html\">?<span>Documentation for ARIMA</span></a></label><div class=\"sk-toggleable__content\"><pre>ARIMA(order=(1, 2, 0), trend=&#x27;n&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "ARIMA(order=(1, 2, 0), trend='n')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "forecaster2 = ARIMA(order=(1,1,1), trend='n')\n",
    "forecaster2.fit(y)\n",
    "\n",
    "\n",
    "forecaster3 = ARIMA(order=(1,2,0), trend='n')\n",
    "forecaster3.fit(y)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ddbaa4c",
   "metadata": {},
   "source": [
    "Diagnostics= test for absence of serial correlation in residues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0d5dcf85",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.stats.diagnostic import het_arch, acorr_ljungbox\n",
    "from statsmodels.tsa.api import ARIMA\n",
    "from statsmodels.graphics.tsaplots import plot_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "08c97020",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n",
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:471: ValueWarning: No frequency information was provided, so inferred frequency QS-OCT will be used.\n",
      "  self._init_dates(dates, freq)\n"
     ]
    }
   ],
   "source": [
    "mod1= ARIMA(y, order=(1,0,1),trend='n', missing='drop')\n",
    "mod2= ARIMA(y, order=(1,1,0),trend='n', missing='drop')\n",
    "mod3= ARIMA(y, order=(1,1,1),trend='n', missing='drop')\n",
    "mod4= ARIMA(y, order=(1,2,0),trend='n', missing='drop')\n",
    "\n",
    "res1=mod1.fit()\n",
    "res2=mod2.fit()\n",
    "res3=mod3.fit()\n",
    "res4=mod4.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e365e06f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "res1.plot_diagnostics(lags=15)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2775f08",
   "metadata": {},
   "source": [
    "From the correlogram we see the presence of serial correlation in residues at the lag 1 for the model 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7571432d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lb_stat</th>\n",
       "      <th>lb_pvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>6.785459</td>\n",
       "      <td>0.237091</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    lb_stat  lb_pvalue\n",
       "7  6.785459   0.237091"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod1.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "acorr_ljungbox(res1.resid[mod1.k_diff:] , lags=[7], model_df=model_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c915986c",
   "metadata": {},
   "source": [
    "The $p$-value $>0.05$ $\\Rightarrow$ there is no serial correlation in residues of the first model , This is good"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5b8366b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lb_stat</th>\n",
       "      <th>lb_pvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>24.749549</td>\n",
       "      <td>0.00038</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     lb_stat  lb_pvalue\n",
       "7  24.749549    0.00038"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod2.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "acorr_ljungbox(res2.resid[mod2.k_diff:] , lags=[7], model_df=model_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3774c791",
   "metadata": {},
   "source": [
    "The model $2$ does not pass the diagnostics, which is bad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "75da13e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lb_stat</th>\n",
       "      <th>lb_pvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5.705529</td>\n",
       "      <td>0.335935</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    lb_stat  lb_pvalue\n",
       "7  5.705529   0.335935"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod3.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "acorr_ljungbox(res3.resid[mod3.k_diff:] , lags=[7], model_df=model_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bd77f5d",
   "metadata": {},
   "source": [
    "The model 3 passes the diagnostics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "72d8fd0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lb_stat</th>\n",
       "      <th>lb_pvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>28.217769</td>\n",
       "      <td>0.000085</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     lb_stat  lb_pvalue\n",
       "7  28.217769   0.000085"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod4.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "acorr_ljungbox(res4.resid[mod4.k_diff:] , lags=[7], model_df=model_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "363a8524",
   "metadata": {},
   "source": [
    "The model  4  does not pass the diagnostics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "83d12879",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.7838487397034944e-09"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod1.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "lm_stat, lm_pval, f_stat, f_pval = het_arch(res1.resid[mod1.k_diff:], nlags=7, ddof=model_df)\n",
    "\n",
    "lm_pval"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b37494d7",
   "metadata": {},
   "source": [
    "The null hypothesis is rejected $\\Rightarrow$ the model 1 does not pass the diagnostics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4b965ff9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.135518752309382e-07"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod2.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "lm_stat, lm_pval, f_stat, f_pval = het_arch(res2.resid[mod2.k_diff:], nlags=7, ddof=model_df)\n",
    "\n",
    "lm_pval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d60bc50f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.9866792110903704e-12"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod3.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "lm_stat, lm_pval, f_stat, f_pval = het_arch(res3.resid[mod3.k_diff:], nlags=7, ddof=model_df)\n",
    "\n",
    "lm_pval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "00e727ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.384002939687553e-06"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_df = mod4.k_params-1\n",
    "# to test we drop first d residuals (d=mod.k_diff)\n",
    "lm_stat, lm_pval, f_stat, f_pval = het_arch(res4.resid[mod4.k_diff:], nlags=7, ddof=model_df)\n",
    "\n",
    "lm_pval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "daf7ac59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GDP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1980Q1</th>\n",
       "      <td>2789.842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980Q2</th>\n",
       "      <td>2797.352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980Q3</th>\n",
       "      <td>2856.483</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980Q4</th>\n",
       "      <td>2985.557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1981Q1</th>\n",
       "      <td>3124.206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022Q4</th>\n",
       "      <td>26734.277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023Q1</th>\n",
       "      <td>27164.359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023Q2</th>\n",
       "      <td>27453.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023Q3</th>\n",
       "      <td>27967.697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023Q4</th>\n",
       "      <td>28296.967</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>176 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              GDP\n",
       "1980Q1   2789.842\n",
       "1980Q2   2797.352\n",
       "1980Q3   2856.483\n",
       "1980Q4   2985.557\n",
       "1981Q1   3124.206\n",
       "...           ...\n",
       "2022Q4  26734.277\n",
       "2023Q1  27164.359\n",
       "2023Q2  27453.815\n",
       "2023Q3  27967.697\n",
       "2023Q4  28296.967\n",
       "\n",
       "[176 rows x 1 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp = web.DataReader(name='GDP', data_source='fred', start='1980-1', end='2023-12' )\n",
    "gdp\n",
    "\n",
    "gdp.index=pd.period_range(start='1980-1', end='2023-12',freq='Q')\n",
    "y=gdp\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "8b90da00",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sktime.split import temporal_train_test_split, ExpandingWindowSplitter, SlidingWindowSplitter, SingleWindowSplitter\n",
    "from sktime.forecasting.model_evaluation import evaluate\n",
    "from sktime.performance_metrics.forecasting import MeanSquaredError, MeanAbsoluteError, MeanAbsolutePercentageError # Метрики MSE, MAE, MAPE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "3eb12768",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25934665.61527627"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# разбиваем выбору на обучающую (первые 80%) и тестовую\n",
    "y_train, y_test = temporal_train_test_split(y, train_size=0.8)\n",
    "\n",
    "# Обучаем модель на тестовом множестве\n",
    "forecaster.fit(y_train)\n",
    "\n",
    "# прогнозируем для тестовых наблюдений\n",
    "y_pred = forecaster.predict(fh = y_test.index)\n",
    "\n",
    "# инициализируем метрику\n",
    "metric = MeanSquaredError(square_root=False)\n",
    "# вычисляем метрику на данных\n",
    "metric.evaluate(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "ddade101",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "22275600.437643845"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# разбиваем выбору на обучающую (первые 80%) и тестовую\n",
    "y_train, y_test = temporal_train_test_split(y, train_size=0.8)\n",
    "\n",
    "# Обучаем модель на тестовом множестве\n",
    "forecaster1.fit(y_train)\n",
    "\n",
    "# прогнозируем для тестовых наблюдений\n",
    "y_pred = forecaster1.predict(fh = y_test.index)\n",
    "\n",
    "# инициализируем метрику\n",
    "metric = MeanSquaredError(square_root=False)\n",
    "# вычисляем метрику на данных\n",
    "metric.evaluate(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "d0ece578",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7938047.630072092"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# разбиваем выбору на обучающую (первые 80%) и тестовую\n",
    "y_train, y_test = temporal_train_test_split(y, train_size=0.8)\n",
    "\n",
    "# Обучаем модель на тестовом множестве\n",
    "forecaster2.fit(y_train)\n",
    "\n",
    "# прогнозируем для тестовых наблюдений\n",
    "y_pred = forecaster2.predict(fh = y_test.index)\n",
    "\n",
    "# инициализируем метрику\n",
    "metric = MeanSquaredError(square_root=False)\n",
    "# вычисляем метрику на данных\n",
    "metric.evaluate(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "8768e964",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3691233.2062184084"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# разбиваем выбору на обучающую (первые 80%) и тестовую\n",
    "y_train, y_test = temporal_train_test_split(y, train_size=0.8)\n",
    "\n",
    "# Обучаем модель на тестовом множестве\n",
    "forecaster3.fit(y_train)\n",
    "\n",
    "# прогнозируем для тестовых наблюдений\n",
    "y_pred = forecaster3.predict(fh = y_test.index)\n",
    "\n",
    "# инициализируем метрику\n",
    "metric = MeanSquaredError(square_root=False)\n",
    "# вычисляем метрику на данных\n",
    "metric.evaluate(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4dc67e32",
   "metadata": {},
   "source": [
    "The best model is the model 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dc0a0ff",
   "metadata": {},
   "source": [
    "# Test for stationary= unit root tests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "09825128",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.tsa.api import adfuller, kpss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "af9cbf6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.9897224363256574,\n",
       " 1.0,\n",
       " {'1%': -4.011455293061225,\n",
       "  '5%': -3.4358815193469385,\n",
       "  '10%': -3.141957196268222})"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adf_stat, pval, usedlag, nobs, critical_values, BIC = adfuller(y, regression='ct', autolag='BIC')\n",
    "# test statistics, its p-value and critical values\n",
    "adf_stat, pval, critical_values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29090cb1",
   "metadata": {},
   "source": [
    "$H_0$: the time series is not stationary\n",
    "\n",
    "$p$-value $>0.05$ $\\Rightarrow$ we do not reject $H_0$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fb3d6c8",
   "metadata": {},
   "source": [
    "$H_0$: the time series is not stationary\n",
    "\n",
    "$p$-value $>0.05$ $\\Rightarrow$ we do not reject $H_0$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "a68800cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\stattools.py:2018: InterpolationWarning: The test statistic is outside of the range of p-values available in the\n",
      "look-up table. The actual p-value is smaller than the p-value returned.\n",
      "\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.39753002430286577,\n",
       " 0.01,\n",
       " {'10%': 0.119, '5%': 0.146, '2.5%': 0.176, '1%': 0.216})"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kpss_stat, p_value, lags, crit = kpss(y, regression='ct')\n",
    "# тестовая статистика, её p-значение и критические значения\n",
    "kpss_stat, p_value, crit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93625321",
   "metadata": {},
   "source": [
    "$H_0$: the time series is not stationary\n",
    "\n",
    "$p$-value $>0.05$ $\\Rightarrow$ we do not reject $H_0$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1e48b8b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "dy=y.diff().dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "eed35d18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-13.959269384696697,\n",
       " 1.1950405265771443e-21,\n",
       " {'1%': -4.011763737803776,\n",
       "  '5%': -3.4360292512258863,\n",
       "  '10%': -3.1420436590266103})"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adf_stat, pval, usedlag, nobs, critical_values, BIC = adfuller(dy, regression='ct', autolag='BIC')\n",
    "# test statistics, its p-value and critical values\n",
    "adf_stat, pval, critical_values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e6c0e05",
   "metadata": {},
   "source": [
    "$p$-value $<0.05$ $\\Rightarrow$ we reject $H_0$\n",
    "\n",
    "the time series $\\Delta y$ is stationary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "af7dcf5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.16266142821725751,\n",
       " 0.03611547648561873,\n",
       " {'10%': 0.119, '5%': 0.146, '2.5%': 0.176, '1%': 0.216})"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kpss_stat, p_value, lags, crit = kpss(dy, regression='ct')\n",
    "# тестовая статистика, её p-значение и критические значения\n",
    "kpss_stat, p_value, crit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9fa9910",
   "metadata": {},
   "source": [
    "$p$-value $<0.05$ $\\Rightarrow$ we reject $H_0$\n",
    "\n",
    "the time series $\\Delta y$ is not stationary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "5bcc4fea",
   "metadata": {},
   "outputs": [],
   "source": [
    "ddy=dy.diff().dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "12a718c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-11.635425065074504,\n",
       " 1.5630264210019675e-18,\n",
       " {'1%': -4.013034503358437,\n",
       "  '5%': -3.436637782210462,\n",
       "  '10%': -3.142399780175046})"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "adf_stat, pval, usedlag, nobs, critical_values, BIC = adfuller(ddy, regression='ct', autolag='BIC')\n",
    "# test statistics, its p-value and critical values\n",
    "adf_stat, pval, critical_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "06590ec6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\stattools.py:2022: InterpolationWarning: The test statistic is outside of the range of p-values available in the\n",
      "look-up table. The actual p-value is greater than the p-value returned.\n",
      "\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.09387750853503768,\n",
       " 0.1,\n",
       " {'10%': 0.119, '5%': 0.146, '2.5%': 0.176, '1%': 0.216})"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kpss_stat, p_value, lags, crit = kpss(ddy, regression='ct')\n",
    "# тестовая статистика, её p-значение и критические значения\n",
    "kpss_stat, p_value, crit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "592e60f8",
   "metadata": {},
   "source": [
    "Both tests say that $\\Delta^2 y$ is stationaty"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f45fd5d",
   "metadata": {},
   "source": [
    "The final conclusion:\n",
    "    ADF-test: the optimal $d$ is $1$\n",
    "    KPSS-test: the optimal $d$ is $2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ea5dbb5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
